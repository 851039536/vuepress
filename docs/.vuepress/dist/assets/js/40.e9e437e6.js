(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{233:function(t,a,e){"use strict";e.r(a);var s=e(0),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),e("p",[t._v("在数据上下文"),e("code",[t._v("DBModel")]),t._v("的实例中有个"),e("code",[t._v("Database")]),t._v("属性，其中有两组方法"),e("code",[t._v(".ExecuteSqlCommand()")]),t._v("和"),e("code",[t._v(".SqlQuery()")]),t._v("。它们都可以执行SQL语句，过"),e("code",[t._v(".ExecuteSqlCommand()")]),t._v("是不返回结果的，只返回受影响的行数，所以"),e("code",[t._v(".ExecuteSqlCommand()")]),t._v("更适合执行创建、更新、删除操作。"),e("code",[t._v(".SqlQuery()")]),t._v("则会返回查询到的结果，并将结果保存在数据实体中，所以更适合执行查询操作")]),t._v(" "),e("ul",[e("li",[t._v("使用"),e("code",[t._v(".ExecuteSqlCommand()")]),t._v("实现创建、更新、删除")]),t._v(" "),e("li",[e("code",[t._v(".ExecuteSqlCommand()")]),t._v("的使用方法也很简单，直接传入SQL语句就可以了，执行完成后会返回受影响的行数。")])]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" db "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DBModel")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建数据库上下文")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//同步的方式执行SQL，并返回受影响的行数")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" db"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Database"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExecuteSqlCommand")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"CREATE TABLE `test`.`test` (\n         `id` INT NOT NULL,\n         PRIMARY KEY(`id`)); "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用SqlParameter传值可以避免SQL注入")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p_name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqlParameter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 萝莉"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p_age "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqlParameter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@age"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果使用的是MySql数据库 需要SqlParameter把替换为MySqlParameter")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//var p_name = new MySqlParameter(@name, 萝莉);")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//var p_age = new MySqlParameter(@age, 13);")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更改学生年龄")]),t._v("\n  result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" db"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Database"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExecuteSqlCommand")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"UPDATE `test`.`student`\n                      SET `age` = @age\n                      WHERE `name` = @name;"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p_age"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//异步的方式执行SQL，并返回受影响的行数")]),t._v("\n  Task"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" result2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" db"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Database"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExecuteSqlCommandAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DROP TABLE `test`.`test`;"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("ul",[e("li",[e("p",[t._v("如果需要创建或删除当前数据库，"),e("code",[t._v("Database")]),t._v("属性中还存在"),e("code",[t._v(".Create()")]),t._v(" 和"),e("code",[t._v(".Delete()")]),t._v("方法，它们不接受参数，返回一个bool值表示执行成功或失败。")])]),t._v(" "),e("li",[e("p",[t._v("使用"),e("code",[t._v(".SqlQuery()")]),t._v("查询数据")])]),t._v(" "),e("li",[e("p",[t._v("那么如果我只想获取姓名和年龄，那就得单独定义一个类（其中包含一个"),e("code",[t._v("string")]),t._v("类型的name和"),e("code",[t._v("int")]),t._v("类型的age），来保存数据了。")])])]),t._v(" "),e("div",{staticClass:"language-asp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class temp\n{\n  public string name { get; set; }\n  public int age { get; set; }\n}\nstatic void Main(string[] args)\n{\n  using (var db = new DBModel()) //创建数据库上下文\n  {\n    //查询叫萝莉的学生信息，并指定返回值类型为student\n    DbRawSqlQuery<student> result1 = db.Database.SqlQuery<student>("SELECT * FROM test.student WHERE name = \'萝莉\'");\n    //也可以这样指定返回值类型\n    //DbRawSqlQuery result1 = db.Database.SqlQuery(typeof(student), "SELECT * FROM test.student WHERE name = \'萝莉\'");\n    Console.WriteLine(result1.FirstOrDefault().name); //打印姓名\n    DbRawSqlQuery<int> result2 = db.Database.SqlQuery<int>("SELECT count(*) FROM test.student");\n    Console.WriteLine(result2.FirstOrDefault());  //打印有多少学生\n    //只查询学生的年龄与姓名\n    var result3 = db.Database.SqlQuery<temp>("SELECT `name`,`age` FROM test.student;");\n    foreach (temp item in result3)\n    {\n      Console.WriteLine(item.name + ":" + item.age);\n    }\n  }\n')])])]),e("div",{staticClass:"language-asp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" 使用`DbSet<T>`下的`.SqlQuery()`\n 在每个数据实体集合DbSet<T>下也有一个`.SqlQuery()`，功能与上面介绍的一样，只不过`DbSet<T>`下的`.SqlQuery()`只能返回`DbSet<T>`中包含的类型。但`DbSet<T>`下的`.SqlQuery()`在返回数据的同时还会让数据库上下文（`DBModel`）跟踪返回数据的状态，如果返回的数据发生了修改，就可以使用.SaveChanges()将结果直接保存回数据库。而`.Database.SqlQuery()`查出的结果则是做不到的。\n\nusing (var db = new DBModel()) //创建数据库上下文\n{\n  //查询叫萝莉的学生信息，并修改她的年龄\n  student result1 = db.students.SqlQuery(\"SELECT * FROM test.student WHERE name = '萝莉'\").FirstOrDefault();\n  result1.age = 13;  //通过实体集合下.SqlQuery查询到的数据，修改之后是可以保存到数据库的\n  student result2 = db.Database.SqlQuery<student>(\"SELECT * FROM test.student WHERE name = '旺财'\").FirstOrDefault();\n  result2.age = 21;  //因为使用的是.Database.SqlQuery查询到的，所以这里的修改不会保存到数据库\n  //如果希望.Database.SqlQuery下查出的数据在修改后也能保存到数据库\n  student result3 = db.Database.SqlQuery<student>(\"SELECT * FROM test.student WHERE name = '小明'\").FirstOrDefault();\n  result3.age = 36;\n  db.Entry<student>(result3).State = System.Data.Entity.EntityState.Modified; //通知数据上下文，这条记录也被修改了\n  db.SaveChanges();\n}\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);